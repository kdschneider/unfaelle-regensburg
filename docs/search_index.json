[["index.html", "Unfallstatistik Regensburg Index Aufgabe", " Unfallstatistik Regensburg Konstantin Schneider 2021-09-26 Index Aufgabe Ein Datenprojekt Ihrer Wahl. Dies muss nicht in R realisiert sein, kann mit einem Werkzeug Ihrer Wahl entstehen. Ziel: Text und überzeugende Darstellung der Ergebnisse. "],["1-data.html", "1 Unfalldaten 1.1 Geocode 1.2 CSV/RDA speichern.", " 1 Unfalldaten Das Statistische Bundeamt stellt eine vielzahl an unterschiedlichen Datensätzen zur Verfügung. In diesem Dokument werden offizielle Unfalldaten mit Personenschaden für Regensburg ausgewertet. Diese können hier heruntergeladen werden. library(tidyverse) library(lubridate) filenames &lt;- list.files( path = here::here(&quot;data-raw/accidents&quot;) ) ReadGarbageData &lt;- function(filename){ # read a file data &lt;- read_csv2(here::here(&quot;data-raw/accidents&quot;, filename)) # the files have different headers # this key corrects that col_key &lt;- c( # ids FID = &quot;id1&quot;, OBJECTID = &quot;id2&quot;, OBJECTID_1 = &quot;id2&quot;, UIDENTSTLA = &quot;id3&quot;, UIDENTSTLAE = &quot;id3&quot;, # lighting ULICHTVERH = &quot;light_condition&quot;, LICHT = &quot;light_condition&quot;, # street condition IstStrasse = &quot;street_condition&quot;, STRZUSTAND = &quot;street_condition&quot;, # other IstSonstig = &quot;other&quot;, IstSonstige = &quot;other&quot;, # common ULAND = &quot;land&quot;, UREGBEZ = &quot;bezirk&quot;, UKREIS = &quot;kreis&quot;, UGEMEINDE = &quot;gemeinde&quot;, UJAHR = &quot;year&quot;, UMONAT = &quot;month&quot;, USTUNDE = &quot;hour&quot;, UWOCHENTAG = &quot;weekday&quot;, UKATEGORIE = &quot;severity&quot;, UART = &quot;kind_of_accident&quot;, UTYP1 = &quot;type_of_accident&quot;, IstRad = &quot;bicycle&quot;, IstKrad = &quot;bike&quot;, IstPKW = &quot;car&quot;, IstFuss = &quot;pedestrian&quot;, IstGkfz = &quot;truck&quot;, LINREFX = &quot;linref_x&quot;, LINREFY = &quot;linref_y&quot;, XGCSWGS84 = &quot;lng&quot;, YGCSWGS84 = &quot;lat&quot; ) # correct col names via the key names(data) &lt;- col_key[names(data)] # correct col types data &lt;- data |&gt; mutate( bezirk = as.character(bezirk), year = as.numeric(year), month = as.numeric(month), hour = as.numeric(hour) ) return(data) } data &lt;- filenames |&gt; map_dfr( ReadGarbageData ) |&gt; select(-starts_with(&quot;id&quot;)) data &lt;- data |&gt; filter( land == &quot;09&quot; &amp; bezirk == &quot;3&quot; &amp; kreis == &quot;62&quot; &amp; gemeinde == &quot;000&quot; ) |&gt; select(-kind_of_accident, -type_of_accident, -linref_x, -linref_y) |&gt; select(-land, -bezirk, -kreis, -gemeinde) # add id data &lt;- data |&gt; mutate( id = row_number() ) |&gt; select(id, everything()) data &lt;- data |&gt; mutate( datetime = glue::glue(&quot;{month}-{year}-{hour}&quot;) |&gt; parse_datetime(format = &quot;%m-%Y-%H&quot;) ) |&gt; mutate( weekday = wday(weekday, label = TRUE), date = date(datetime) ) |&gt; mutate( across( .cols = c(severity, light_condition, street_condition), .fns = as_factor ) ) |&gt; mutate( across( .cols = bicycle:other, .fns = as.logical ) ) |&gt; mutate( severity = fct_recode( severity, &quot;Toedlich&quot; = &quot;1&quot;, &quot;Schwer&quot; = &quot;2&quot;, &quot;Leicht&quot; = &quot;3&quot; ), light_condition = fct_recode( light_condition, &quot;Tageslicht&quot; = &quot;0&quot;, &quot;Dämmerung&quot; = &quot;1&quot;, &quot;Dunkelheit&quot; = &quot;2&quot; ), street_condition = fct_recode( street_condition, &quot;Trocken&quot; = &quot;0&quot;, &quot;Nass/Feucht&quot; = &quot;1&quot;, &quot;Winterglatt&quot; = &quot;2&quot; ) ) data |&gt; DT::datatable() 1.1 Geocode # pb &lt;- # progress::progress_bar$new( # format = &quot;Lade Geodaten :current/:total [:bar] :percent (eta: :eta)&quot;, # total = nrow(data) # ) # # pb$tick(0) # # data &lt;- # map2_dfr( # .x = data$lng, # .y = data$lat, # .f = function(x = .x, y = .y){ # # geodata &lt;- photon::reverse(x, y) |&gt; # select(name:country) # # pb$tick() # # return(geodata) # } # ) |&gt; # mutate( # id = row_number(), # street = ifelse(is.na(street), name, street) # ) |&gt; # right_join(data, by = c(&quot;id&quot;)) # # remove(pb) 1.2 CSV/RDA speichern. # data write_csv2( x = data, file = here::here(&quot;output/regensburg_data.csv&quot;) ) save( list = c(&quot;data&quot;), file = here::here(&quot;data/regensburg_data.rda&quot;) ) "],["2-shapefiles.html", "2 Shapefiles 2.1 Stadtgrenze Regensburg 2.2 Stadtteile 2.3 Autobahnen 2.4 Flüsse 2.5 Finale Karte", " 2 Shapefiles library(tidyverse) library(sf) Die restlichen Shapefiles (Stadtgrenze, Stadtteile, Gewässer, Autobahnen) stammen vom Amt für Stadtentwicklung Regensburg 2.1 Stadtgrenze Regensburg sf.regensburg &lt;- read_sf(here::here(&quot;data-raw/shapefiles/regensburg/gesamtstadt.shp&quot;)) |&gt; st_transform(&quot;WGS84&quot;) |&gt; rename( &quot;m2&quot; = qm ) |&gt; select(m2, geometry) ggplot() + geom_sf(data = sf.regensburg) + ggthemes::theme_map() 2.2 Stadtteile sf.districts &lt;- read_sf(here::here(&quot;data-raw/shapefiles/districts/stadtbezirke.shp&quot;)) |&gt; st_transform(&quot;WGS84&quot;) |&gt; rename( &quot;district&quot; = Name, &quot;ha&quot; = Hektar ) |&gt; mutate( m2 = ha * 10^4 ) |&gt; select(district, m2, geometry) ggplot() + geom_sf(data = sf.districts, linetype = 2) + geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) + ggthemes::theme_map() 2.3 Autobahnen sf.highways &lt;- read_sf(here::here(&quot;data-raw/shapefiles/highways/autobahn.shp&quot;)) |&gt; st_transform(&quot;WGS84&quot;) |&gt; rename( &quot;feeder&quot; = ZUBRINGER ) |&gt; mutate( feeder = case_when( feeder == &quot;j&quot; ~ TRUE, feeder == &quot;n&quot; ~ FALSE ) ) ggplot() + geom_sf(data = sf.districts, linetype = 2) + geom_sf(data = sf.highways, alpha = 0.6) + geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) + ggthemes::theme_map() 2.4 Flüsse sf.rivers &lt;- read_sf(here::here(&quot;data-raw/shapefiles/rivers/gewaesser.shp&quot;)) |&gt; st_transform(&quot;WGS84&quot;) |&gt; select(geometry) ggplot() + geom_sf(data = sf.districts, linetype = 2) + geom_sf(data = sf.rivers, alpha = 0.6) + geom_sf(data = sf.highways, alpha = 0.6) + geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) + ggthemes::theme_map() 2.5 Finale Karte ggplot() + geom_sf(data = sf.districts, aes(fill = district), alpha = 0.7) + geom_sf(data = sf.rivers, alpha = 0.7, fill = &quot;lightblue&quot;) + geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) + theme_void() + theme( legend.position = &quot;right&quot;, legend.title = element_blank() ) "],["3-leaflet-map.html", "3 Leaflet Karte 3.1 Basemap 3.2 Marker 3.3 Stadtteile als Shapefile 3.4 Bedienelemente 3.5 Finale Karte", " 3 Leaflet Karte library(tidyverse) library(leaflet) library(sf) load( here::here(&quot;data/regensburg_data.rda&quot;) ) load( here::here(&quot;data/shapefiles.rda&quot;) ) sf.data &lt;- data |&gt; st_as_sf(coords = c(&quot;lng&quot;, &quot;lat&quot;), crs = &quot;WGS84&quot;) 3.1 Basemap bounds &lt;- sf.regensburg |&gt; st_bbox() map &lt;- leaflet( options = leafletOptions( crs = leafletCRS(code = &quot;WGS84&quot;), preferCanvas = NULL ) ) |&gt; addProviderTiles( provider = providers$OpenStreetMap.DE, group = &quot;OSM&quot;, options = providerTileOptions(minZoom = 11) ) |&gt; setView( lng = (as.numeric(bounds[1]) + as.numeric(bounds[3]))/2, lat = (as.numeric(bounds[2]) + as.numeric(bounds[4]))/2, zoom = 12 ) |&gt; setMaxBounds( lng1 = as.numeric(bounds[1] - 0.015), lat1 = as.numeric(bounds[2] - 0.015), lng2 = as.numeric(bounds[3] + 0.015), lat2 = as.numeric(bounds[4] + 0.015) ) 3.2 Marker custom_popup &lt;- function(data, header) { text &lt;- glue::glue( &quot;&lt;b&gt;{header}&lt;/b&gt; &quot;, &quot;&lt;br&gt;&quot;, &quot;{data$month}/{data$year} ({data$hour} Uhr)&quot; ) return(text) } map &lt;- map |&gt; addAwesomeMarkers( data = data |&gt; filter(severity == &quot;Toedlich&quot;), group = &quot;Tödliche Unfälle&quot;, lng = ~lng, lat = ~lat, icon = awesomeIcons( icon = &#39;ios-close&#39;, iconColor = &#39;black&#39;, library = &#39;ion&#39;, markerColor = &quot;red&quot; ), clusterOptions = markerClusterOptions(), popup = custom_popup(data = data, header = &quot;Tödlicher Unfall&quot;) ) |&gt; addAwesomeMarkers( data = data |&gt; filter(severity == &quot;Schwer&quot;), group = &quot;Schwere Unfälle&quot;, lng = ~lng, lat = ~lat, icon = awesomeIcons( icon = &#39;ios-close&#39;, iconColor = &#39;black&#39;, library = &#39;ion&#39;, markerColor = &quot;orange&quot; ), clusterOptions = markerClusterOptions(), popup = custom_popup(data = data, header = &quot;Schwerer Unfall&quot;) ) |&gt; addAwesomeMarkers( data = data |&gt; filter(severity == &quot;Leicht&quot;), group = &quot;Leichte Unfälle&quot;, lng = ~lng, lat = ~lat, icon = awesomeIcons( icon = &#39;ios-close&#39;, iconColor = &#39;black&#39;, library = &#39;ion&#39;, markerColor = &quot;beige&quot; ), clusterOptions = markerClusterOptions(), popup = custom_popup(data = data, header = &quot;Leichter Unfall&quot;) ) 3.3 Stadtteile als Shapefile custom_label &lt;- function(data) { text &lt;- glue::glue( &quot;{data$district}: {data$n} Unfälle&quot; ) return(text) } districts &lt;- data |&gt; st_as_sf(coords = c(&quot;lng&quot;, &quot;lat&quot;), crs = &quot;WGS84&quot;) |&gt; rename( points = geometry ) |&gt; st_join( y = sf.districts |&gt; rename(&quot;district_shape&quot; = geometry), join = st_within, left = TRUE ) |&gt; select(-m2) |&gt; as_tibble() |&gt; left_join( y = sf.districts |&gt; rename(&quot;district_polygon&quot; = geometry) , by = &quot;district&quot; ) |&gt; drop_na(district) |&gt; mutate( district = as_factor(district) |&gt; fct_infreq() |&gt; fct_rev() ) |&gt; add_count(district) |&gt; select(district, district_polygon, n) |&gt; unique() |&gt; st_as_sf() map &lt;- map |&gt; addPolygons( data = districts, group = &quot;Stadtteile&quot;, opacity = 1, weight = 0.5, fillOpacity = 0.5, color = &quot;black&quot;, fillColor = ~colorNumeric(&quot;viridis&quot;, n)(n), highlightOptions = highlightOptions( color = &quot;white&quot;, weight = 2, bringToFront = TRUE ), label = ~custom_label(data = districts) ) 3.4 Bedienelemente map &lt;- map |&gt; addProviderTiles( provider = providers$Stamen.TonerBackground, group = &quot;Stadtteile&quot;, options = providerTileOptions(minZoom = 11) ) |&gt; addLayersControl( baseGroups = c(&quot;OSM&quot;, &quot;Stadtteile&quot;), overlayGroups = c(&quot;Tödliche Unfälle&quot;, &quot;Schwere Unfälle&quot;, &quot;Leichte Unfälle&quot;), options = layersControlOptions(collapsed = FALSE) ) 3.5 Finale Karte map "],["4-total-crashes.html", "4 Auswertung 4.1 Unfälle nach Monat 4.2 Unfälle nach Uhrzeit 4.3 Unfälle nach Ortsteil", " 4 Auswertung Zur besseren Lesbarkeit wird der R Code in diesem Kapitel nicht gezeigt. Dieser besteht größtenteils aus Plots und ist bis auf wenige Ausnahmen nicht weiter relevant. Im Stadtgebiet Regensburg geschahen von den Jahren 2016 bis 2020 insgesamt 3167 Unfälle mit Personenschaden. Abbildung 1 zeigt die monatlichen Unfälle in diesem Zeitraum. Abbildung 1: Monatliche Unfälle in Regensburg. Während sich kein eindeutiger Auf- oder Abwärtstrend feststellen lässt, zeigen die Daten dennoch eine Jährliche Periodizität: Im Sommer finden die meisten Unfälle mit Personenschaden statt, während die Anzahl der Unfälle von Herbst bis Frühjahr sinkt. Abbildung 2 zeigt die Anzahl der jährlichen Unfälle in Regensburg. Im Jahr 2020 zeigt sich ein Rückgang von 25%. Dieser kann auf geringeren Verkehr aufgrund der Corona Pandemie zurückgeführt werden. Dies wird durch Abbildung 3 verdeutlicht: Alle dokumentierten Verkehrsmittel hatten einen Rückgang der jährlichen Unfälle von 2019 bis 2020. Abbildung 2: Jährliche Unfälle mit Personenschaden. Abbildung 3 zeigt zudem, dass sich die Anzahl der Unfälle aller Verkehrsmittel außer Fahrrad auf einem fallenden Trend befinden. Die Anzahl der Unfälle mit Fahrradbeteiligung dagegen stieg bis 2020 kontinuierlich an. Abbildung 3: Jährliche Unfälle mit Personenschaden nach Verkehrsteilnehmer unterteilt. 4.1 Unfälle nach Monat 4.2 Unfälle nach Uhrzeit 4.3 Unfälle nach Ortsteil 4.3.1 Absolute Anzahl 4.3.2 Pro Quadratkilometer "],["5-unfallteilnehmer.html", "5 Unfallteilnehmer", " 5 Unfallteilnehmer load( here::here(&quot;data/regensburg_data.rda&quot;) ) Fragen: Tödliche/Schwere Unfälle mit Fußgängern? Motorrad? Mehr Fußgängerunfälle in der Innenstadt? data.vehicle &lt;- data |&gt; pivot_longer( cols = bicycle:truck, names_to = &quot;type_of_vehicle&quot;, values_to = &quot;took_part&quot; ) |&gt; drop_na() |&gt; count(type_of_vehicle, took_part, severity) data.vehicle |&gt; knitr::kable() type_of_vehicle took_part severity n bicycle FALSE Toedlich 4 bicycle FALSE Schwer 204 bicycle FALSE Leicht 1627 bicycle TRUE Toedlich 2 bicycle TRUE Schwer 189 bicycle TRUE Leicht 1141 bike FALSE Toedlich 3 bike FALSE Schwer 324 bike FALSE Leicht 2440 bike TRUE Toedlich 3 bike TRUE Schwer 69 bike TRUE Leicht 328 car FALSE Toedlich 2 car FALSE Schwer 137 car FALSE Leicht 651 car TRUE Toedlich 4 car TRUE Schwer 256 car TRUE Leicht 2117 pedestrian FALSE Toedlich 6 pedestrian FALSE Schwer 336 pedestrian FALSE Leicht 2538 pedestrian TRUE Schwer 57 pedestrian TRUE Leicht 230 truck FALSE Toedlich 5 truck FALSE Schwer 275 truck FALSE Leicht 2129 truck TRUE Toedlich 1 truck TRUE Schwer 18 truck TRUE Leicht 96 "],["pakete.html", "Pakete", " Pakete "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
