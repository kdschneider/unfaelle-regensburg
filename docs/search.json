[{"path":"index.html","id":"index","chapter":"1 Index","heading":"1 Index","text":"","code":""},{"path":"index.html","id":"aufgabe","chapter":"1 Index","heading":"1.1 Aufgabe","text":"Ein Datenprojekt Ihrer Wahl. Dies muss nicht R realisiert sein, kann mit einem Werkzeug Ihrer Wahl entstehen.\nZiel: Text und überzeugende Darstellung der Ergebnisse.","code":""},{"path":"data.html","id":"data","chapter":"2 Unfalldaten","heading":"2 Unfalldaten","text":"Das Statistische Bundeamt stellt eine vielzahl unterschiedlichen Datensätzen zur Verfügung. diesem Dokument werden offizielle Unfalldaten mit Personenschaden für Regensburg ausgewertet. Diese können hier heruntergeladen werden.","code":"\nlibrary(tidyverse)\nlibrary(lubridate)\nfilenames <-\n  list.files(\n    path = here::here(\"data-raw/accidents\")\n  )\nReadGarbageData <- function(filename){\n\n  # read a file\n  data <- read_csv2(here::here(\"data-raw/accidents\", filename))\n\n  # the files have different headers\n  # this key corrects that\n  col_key <-\n    c(\n      # ids\n      FID = \"id1\",\n      OBJECTID = \"id2\",\n      OBJECTID_1 = \"id2\",\n      UIDENTSTLA = \"id3\",\n      UIDENTSTLAE = \"id3\",\n      # lighting\n      ULICHTVERH = \"light_condition\",\n      LICHT = \"light_condition\",\n      # street condition\n      IstStrasse = \"street_condition\",\n      STRZUSTAND = \"street_condition\",\n      # other\n      IstSonstig = \"other\",\n      IstSonstige = \"other\",\n      # common\n      ULAND = \"land\",\n      UREGBEZ = \"bezirk\",\n      UKREIS = \"kreis\",\n      UGEMEINDE = \"gemeinde\",\n      UJAHR = \"year\",\n      UMONAT = \"month\",\n      USTUNDE = \"hour\",\n      UWOCHENTAG = \"weekday\",\n      UKATEGORIE = \"severity\",\n      UART = \"kind_of_accident\",\n      UTYP1 = \"type_of_accident\",\n      IstRad = \"bicycle\",\n      IstKrad = \"bike\",\n      IstPKW = \"car\",\n      IstFuss = \"pedestrian\",\n      IstGkfz = \"truck\",\n      LINREFX = \"linref_x\",\n      LINREFY = \"linref_y\",\n      XGCSWGS84 = \"lng\",\n      YGCSWGS84 = \"lat\"\n    )\n\n  # correct col names via the key\n  names(data) <- col_key[names(data)]\n\n  # correct col types\n  data <-\n    data |>\n    mutate(\n      bezirk = as.character(bezirk),\n      year = as.numeric(year),\n      month = as.numeric(month),\n      hour = as.numeric(hour)\n    )\n\n  return(data)\n}\ndata <-\n  filenames |>\n  map_dfr(\n    ReadGarbageData\n  ) |>\n  select(-starts_with(\"id\"))\ndata <-\n  data |>\n  filter(\n    land == \"09\" &\n    bezirk == \"3\" &\n    kreis == \"62\" &\n    gemeinde == \"000\"\n  ) |>\n  select(-kind_of_accident, -type_of_accident, -linref_x, -linref_y) |>\n  select(-land, -bezirk, -kreis, -gemeinde)\n\n# add id\ndata <-\n  data |>\n  mutate(\n    id = row_number()\n  ) |>\n  select(id, everything())\ndata <-\n  data |>\n  mutate(\n    datetime = glue::glue(\"{month}-{year}-{hour}\") |>\n      parse_datetime(format = \"%m-%Y-%H\")\n  ) |>\n  mutate(\n    weekday = wday(weekday, label = TRUE),\n    date = lubridate::date(datetime)\n  ) |>\n  mutate(\n    across(\n      .cols = c(severity, light_condition, street_condition),\n      .fns = as_factor\n    )\n  ) |>\n  mutate(\n    across(\n      .cols = bicycle:other,\n      .fns = as.logical\n    )\n  ) |>\n  mutate(\n    severity = fct_recode(\n      severity,\n      \"Toedlich\" = \"1\",\n      \"Schwer\" = \"2\",\n      \"Leicht\" = \"3\"\n    ),\n    light_condition = fct_recode(\n      light_condition,\n      \"Tageslicht\" = \"0\",\n      \"Dämmerung\" = \"1\",\n      \"Dunkelheit\" = \"2\"\n    ),\n    street_condition = fct_recode(\n      street_condition,\n      \"Trocken\" = \"0\",\n      \"Nass/Feucht\" = \"1\",\n      \"Winterglatt\" = \"2\"\n    )\n  )"},{"path":"data.html","id":"geocode","chapter":"2 Unfalldaten","heading":"2.1 Geocode","text":"","code":"\n# pb <- \n#   progress::progress_bar$new(\n#     format = \"Lade Geodaten :current/:total [:bar] :percent (eta: :eta)\",\n#     total = nrow(data)\n#   )\n# \n# pb$tick(0)\n# \n# data <- \n#   map2_dfr(\n#     .x = data$lng,\n#     .y = data$lat,\n#     .f = function(x = .x, y = .y){\n#       \n#       geodata <- photon::reverse(x, y) |> \n#         select(name:country)\n#       \n#       pb$tick()\n#       \n#       return(geodata)\n#     }\n#   ) |>\n#   mutate(\n#     id = row_number(),\n#     street = ifelse(is.na(street), name, street)\n#   ) |>\n#   right_join(data, by = c(\"id\"))\n# \n# remove(pb)"},{"path":"data.html","id":"csvrda-speichern.","chapter":"2 Unfalldaten","heading":"2.2 CSV/RDA speichern.","text":"","code":"\n# data\nwrite_csv2(\n  x = data,\n  file = here::here(\"output/regensburg_data.csv\")\n)\n\nsave(\n  list = c(\"data\"),\n  file = here::here(\"data/regensburg_data.rda\")\n)"},{"path":"shapefiles.html","id":"shapefiles","chapter":"3 Shapefiles","heading":"3 Shapefiles","text":"Die restlichen Shapefiles (Stadtgrenze, Stadtteile, Gewässer, Autobahnen) stammen vom Amt für Stadtentwicklung Regensburg","code":"\nlibrary(tidyverse)\nlibrary(sf)\nsf.regensburg <- \n  read_sf(here::here(\"data-raw/shapefiles/regensburg/gesamtstadt.shp\")) |> \n  st_transform(\"WGS84\") |> \n  rename(\n    \"m2\" = qm\n  ) |>\n  select(m2, geometry)\nggplot() +\n  geom_sf(data = sf.regensburg) +\n  ggthemes::theme_map()\nsf.districts <- \n  read_sf(here::here(\"data-raw/shapefiles/districts/stadtbezirke.shp\")) |> \n  st_transform(\"WGS84\") |> \n  rename(\n    \"district\" = Name,\n    \"ha\" = Hektar\n  ) |> \n  mutate(\n    m2 = ha * 10^4\n  ) |> \n  select(district, m2, geometry)\nggplot() +\n  geom_sf(data = sf.districts, linetype = 2) +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  ggthemes::theme_map()\nsf.highways <- \n  read_sf(here::here(\"data-raw/shapefiles/highways/autobahn.shp\")) |> \n  st_transform(\"WGS84\") |> \n  rename(\n    \"feeder\" = ZUBRINGER\n  ) |> \n  mutate(\n    feeder = case_when(\n      feeder == \"j\" ~ TRUE,\n      feeder == \"n\" ~ FALSE\n    )\n  )\nggplot() +\n  geom_sf(data = sf.districts, linetype = 2) +\n  geom_sf(data = sf.highways, alpha = 0.6) +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  ggthemes::theme_map()\nsf.rivers <- \n  read_sf(here::here(\"data-raw/shapefiles/rivers/gewaesser.shp\")) |> \n  st_transform(\"WGS84\") |> \n  select(geometry)\nggplot() +\n  geom_sf(data = sf.districts, linetype = 2) +\n  geom_sf(data = sf.rivers, alpha = 0.6) +\n  geom_sf(data = sf.highways, alpha = 0.6) +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  ggthemes::theme_map()\nggplot() +\n  geom_sf(data = sf.districts, aes(fill = district), alpha = 0.7) +\n  geom_sf(data = sf.rivers, alpha = 0.7, fill = \"lightblue\") +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  theme_void() +\n  theme(\n    legend.position = \"right\",\n    legend.title = element_blank()\n  )"},{"path":"total-crashes.html","id":"total-crashes","chapter":"4 Anzahl der Unfälle","heading":"4 Anzahl der Unfälle","text":"","code":"\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(sf)\ndata |> \n  mutate(\n    month_year = parse_date(\n      x = glue::glue(\"{month}/{year}\"),\n      format = \"%m/%Y\"\n    )\n  ) |> \n  group_by(month_year, severity) %>%\n  tally() %>%\n  ggplot(aes(x = month_year, y = n)) +\n  geom_col(\n    aes(fill = severity)\n  ) +\n  scale_x_date(\n    date_breaks = \"6 months\",\n    date_labels = \"%m/%Y\"\n  ) +\n  labs(\n    x = \"Datum\",\n    y = \"Anzahl an Unfällen\",\n    title = \"Histogramm\",\n    fill = \"\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.1))"},{"path":"total-crashes.html","id":"unfälle-nach-monat","chapter":"4 Anzahl der Unfälle","heading":"4.1 Unfälle nach Monat","text":"","code":"\ndata.barplot <- \n  data |> \n  mutate(\n    month = as_factor(month) |> \n      fct_recode(\n        \"Januar\" = \"1\",\n        \"Februar\" = \"2\",\n        \"März\" = \"3\",\n        \"April\" = \"4\",\n        \"Mai\" = \"5\",\n        \"Juni\" = \"6\",\n        \"Juli\" = \"7\",\n        \"August\" = \"8\",\n        \"September\" = \"9\",\n        \"Oktober\" = \"10\",\n        \"November\" = \"11\",\n        \"Dezember\" = \"12\"\n      ),\n    severity = fct_infreq(severity) |> fct_rev(),\n    light_condition = fct_infreq(light_condition) |> fct_rev(),\n    street_condition = fct_infreq(street_condition) |> fct_rev()\n    )\nplot.bar.month_1 <- \n  data.barplot |> \n  count(month, severity) |> \n  ggplot(aes(x = month, y = n)) +\n  geom_col(\n    aes(fill = severity)\n  ) +\n  labs(\n    x = \"Datum\",\n    y = \"Anzahl an Unfällen\",\n    fill = \"\"\n  ) +\n  theme(\n    legend.position = \"top\"\n  )\n\nplot.bar.month_2 <- \n  data.barplot |> \n  count(month, light_condition) |> \n  ggplot(aes(x = month, y = n)) +\n  geom_col(\n    aes(fill = light_condition)\n  ) +\n  labs(\n    x = \"Datum\",\n    y = \"Anzahl an Unfällen\",\n    fill = \"\"\n  ) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\nplot.bar.month_3 <- \n  data.barplot |> \n  count(month, street_condition) |> \n  ggplot(aes(x = month, y = n)) +\n  geom_col(\n    aes(fill = street_condition)\n  ) +\n  labs(\n    x = \"Datum\",\n    y = \"Anzahl an Unfällen\",\n    fill = \"\"\n  ) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\nplot.bar.month_1 / (plot.bar.month_2 | plot.bar.month_3) + plot_annotation(tag_levels = \"A\")"},{"path":"total-crashes.html","id":"unfälle-nach-uhrzeit","chapter":"4 Anzahl der Unfälle","heading":"4.2 Unfälle nach Uhrzeit","text":"","code":"\nplot.bar.time_1 <- \n  data.barplot |> \n  count(hour, severity) |> \n  ggplot(aes(x = hour, y = n)) +\n  geom_col(\n    aes(fill = severity)\n  ) +\n  labs(\n    x = \"Datum\",\n    y = \"Anzahl an Unfällen\",\n    fill = \"\"\n  ) +\n  theme(\n    legend.position = \"top\"\n  )\n\nplot.bar.time_2 <- \n  data.barplot |> \n  count(hour, light_condition) |> \n  ggplot(aes(x = hour, y = n)) +\n  geom_col(\n    aes(fill = light_condition)\n  ) +\n  labs(\n    x = \"Datum\",\n    y = \"Anzahl an Unfällen\",\n    fill = \"\"\n  ) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\nplot.bar.time_3 <- \n  data.barplot |> \n  count(hour, street_condition) |> \n  ggplot(aes(x = hour, y = n)) +\n  geom_col(\n    aes(fill = street_condition)\n  ) +\n  labs(\n    x = \"Datum\",\n    y = \"Anzahl an Unfällen\",\n    fill = \"\"\n  ) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\nplot.bar.time_1 / (plot.bar.time_2 | plot.bar.time_3) + plot_annotation(tag_levels = \"A\")"},{"path":"total-crashes.html","id":"unfälle-nach-ortsteil","chapter":"4 Anzahl der Unfälle","heading":"4.3 Unfälle nach Ortsteil","text":"","code":"\nsf.data <-\n  data |> \n  st_as_sf(coords = c(\"lng\", \"lat\"), crs = \"WGS84\") |> \n  rename(\n    points = geometry\n  ) |> \n  st_join(\n    y = sf.districts |> rename(\"district_shape\" = geometry),\n    join = st_within,\n    left = TRUE\n  ) |> \n  select(-m2)\ndata.district_plot <-\n  sf.data |> \n  as_tibble() |> \n  left_join(\n    y = sf.districts |> rename(\"district_polygon\" = geometry) ,\n    by = \"district\"\n  ) |>\n  drop_na(district) |>\n  add_count(district) |> \n  mutate(\n    district = as_factor(district) |> \n      fct_infreq() |> \n      fct_rev()\n  )\nplot.district_bar <- \n  data.district_plot |> \n  ggplot(aes(x = district)) +\n  geom_bar(\n    aes(fill = n)\n  ) +\n  coord_flip() +\n  theme(\n    axis.title = element_blank()\n  )\n\nplot.district_map <-\n  data.district_plot |>\n  ggplot() +\n  geom_sf(aes(geometry = district_polygon, fill = n), lwd = 0) + \n  geom_sf(data = sf.districts, alpha = 0) +\n  geom_sf(data = sf.regensburg, alpha = 0, lwd = 0.9, linetype = 1) +\n  ggthemes::theme_map()\n\n\n(plot.district_bar | plot.district_map) & \n  viridis::scale_fill_viridis(\n    option = \"D\",\n    direction = 1,\n    tran = \"log\"\n  ) &\n  theme(\n    legend.position = \"none\"\n  ) &\n  plot_annotation(\n    title = glue::glue(\"Unfälle nach Ortsteil\"), \n    subtitle = glue::glue(\"{min(data$year)} - {max(data$year)}\")\n  )"},{"path":"pakete.html","id":"pakete","chapter":"Pakete","heading":"Pakete","text":"","code":""}]
