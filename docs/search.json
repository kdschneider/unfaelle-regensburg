[{"path":"index.html","id":"index","chapter":"Index","heading":"Index","text":"Eine einseitige HTML-Version finden Sie hier.","code":""},{"path":"index.html","id":"aufgabe","chapter":"Index","heading":"Aufgabe","text":"Ein Datenprojekt Ihrer Wahl. Dies muss nicht R realisiert sein, kann mit einem Werkzeug Ihrer Wahl entstehen.\nZiel: Text und überzeugende Darstellung der Ergebnisse.","code":""},{"path":"data.html","id":"data","chapter":"1 Unfalldaten","heading":"1 Unfalldaten","text":"Das Statistische Bundeamt stellt eine vielzahl unterschiedlichen Datensätzen zur Verfügung. diesem Dokument werden offizielle Unfalldaten mit Personenschaden für Regensburg ausgewertet. Diese können hier heruntergeladen werden.","code":"\nlibrary(tidyverse)\nlibrary(lubridate)\nfilenames <-\n  list.files(\n    path = here::here(\"data-raw/accidents\")\n  )\nReadGarbageData <- function(filename){\n\n  # read a file\n  data <- read_csv2(here::here(\"data-raw/accidents\", filename))\n\n  # the files have different headers\n  # this key corrects that\n  col_key <-\n    c(\n      # ids\n      FID = \"id1\",\n      OBJECTID = \"id2\",\n      OBJECTID_1 = \"id2\",\n      UIDENTSTLA = \"id3\",\n      UIDENTSTLAE = \"id3\",\n      # lighting\n      ULICHTVERH = \"light_condition\",\n      LICHT = \"light_condition\",\n      # street condition\n      IstStrasse = \"street_condition\",\n      STRZUSTAND = \"street_condition\",\n      # other\n      IstSonstig = \"other\",\n      IstSonstige = \"other\",\n      # common\n      ULAND = \"land\",\n      UREGBEZ = \"bezirk\",\n      UKREIS = \"kreis\",\n      UGEMEINDE = \"gemeinde\",\n      UJAHR = \"year\",\n      UMONAT = \"month\",\n      USTUNDE = \"hour\",\n      UWOCHENTAG = \"weekday\",\n      UKATEGORIE = \"severity\",\n      UART = \"kind_of_accident\",\n      UTYP1 = \"type_of_accident\",\n      IstRad = \"bicycle\",\n      IstKrad = \"bike\",\n      IstPKW = \"car\",\n      IstFuss = \"pedestrian\",\n      IstGkfz = \"truck\",\n      LINREFX = \"linref_x\",\n      LINREFY = \"linref_y\",\n      XGCSWGS84 = \"lng\",\n      YGCSWGS84 = \"lat\"\n    )\n\n  # correct col names via the key\n  names(data) <- col_key[names(data)]\n\n  # correct col types\n  data <-\n    data |>\n    mutate(\n      bezirk = as.character(bezirk),\n      year = as.numeric(year),\n      month = as.numeric(month),\n      hour = as.numeric(hour)\n    )\n\n  return(data)\n}\ndata <-\n  filenames |>\n  map_dfr(\n    ReadGarbageData\n  ) |>\n  select(-starts_with(\"id\"))\ndata <-\n  data |>\n  filter(\n    land == \"09\" &\n    bezirk == \"3\" &\n    kreis == \"62\" &\n    gemeinde == \"000\"\n  ) |>\n  select(-kind_of_accident, -type_of_accident, -linref_x, -linref_y) |>\n  select(-land, -bezirk, -kreis, -gemeinde)\n\n# add id\ndata <-\n  data |>\n  mutate(\n    id = row_number()\n  ) |>\n  select(id, everything())\ndata <-\n  data |>\n  mutate(\n    datetime = glue::glue(\"{month}-{year}-{hour}\") |>\n      parse_datetime(format = \"%m-%Y-%H\")\n  ) |>\n  mutate(\n    weekday = wday(weekday, label = TRUE),\n    date = date(datetime)\n  ) |>\n  mutate(\n    across(\n      .cols = c(severity, light_condition, street_condition),\n      .fns = as_factor\n    )\n  ) |>\n  mutate(\n    across(\n      .cols = bicycle:other,\n      .fns = as.logical\n    )\n  ) |>\n  mutate(\n    severity = fct_recode(\n      severity,\n      \"Toedlich\" = \"1\",\n      \"Schwer\" = \"2\",\n      \"Leicht\" = \"3\"\n    ),\n    light_condition = fct_recode(\n      light_condition,\n      \"Tageslicht\" = \"0\",\n      \"Dämmerung\" = \"1\",\n      \"Dunkelheit\" = \"2\"\n    ),\n    street_condition = fct_recode(\n      street_condition,\n      \"Trocken\" = \"0\",\n      \"Nass/Feucht\" = \"1\",\n      \"Winterglatt\" = \"2\"\n    )\n  )\ndata |> \n  DT::datatable()"},{"path":"data.html","id":"geocode","chapter":"1 Unfalldaten","heading":"1.1 Geocode","text":"","code":"\n# pb <- \n#   progress::progress_bar$new(\n#     format = \"Lade Geodaten :current/:total [:bar] :percent (eta: :eta)\",\n#     total = nrow(data)\n#   )\n# \n# pb$tick(0)\n# \n# data <- \n#   map2_dfr(\n#     .x = data$lng,\n#     .y = data$lat,\n#     .f = function(x = .x, y = .y){\n#       \n#       geodata <- photon::reverse(x, y) |> \n#         select(name:country)\n#       \n#       pb$tick()\n#       \n#       return(geodata)\n#     }\n#   ) |>\n#   mutate(\n#     id = row_number(),\n#     street = ifelse(is.na(street), name, street)\n#   ) |>\n#   right_join(data, by = c(\"id\"))\n# \n# remove(pb)"},{"path":"data.html","id":"csvrda-speichern.","chapter":"1 Unfalldaten","heading":"1.2 CSV/RDA speichern.","text":"","code":"\n# data\nwrite_csv2(\n  x = data,\n  file = here::here(\"output/regensburg_data.csv\")\n)\n\nsave(\n  list = c(\"data\"),\n  file = here::here(\"data/regensburg_data.rda\")\n)"},{"path":"shapefiles.html","id":"shapefiles","chapter":"2 Shapefiles","heading":"2 Shapefiles","text":"Die restlichen Shapefiles (Stadtgrenze, Stadtteile, Gewässer, Autobahnen) stammen vom Amt für Stadtentwicklung Regensburg","code":"\nlibrary(tidyverse)\nlibrary(sf)"},{"path":"shapefiles.html","id":"stadtgrenze-regensburg","chapter":"2 Shapefiles","heading":"2.1 Stadtgrenze Regensburg","text":"","code":"\nsf.regensburg <- \n  read_sf(here::here(\"data-raw/shapefiles/regensburg/gesamtstadt.shp\")) |> \n  st_transform(\"WGS84\") |> \n  rename(\n    \"m2\" = qm\n  ) |>\n  select(m2, geometry)\nggplot() +\n  geom_sf(data = sf.regensburg) +\n  ggthemes::theme_map()"},{"path":"shapefiles.html","id":"stadtteile","chapter":"2 Shapefiles","heading":"2.2 Stadtteile","text":"","code":"\nsf.districts <- \n  read_sf(here::here(\"data-raw/shapefiles/districts/stadtbezirke.shp\")) |> \n  st_transform(\"WGS84\") |> \n  rename(\n    \"district\" = Name,\n    \"ha\" = Hektar\n  ) |> \n  mutate(\n    m2 = ha * 10^4\n  ) |> \n  select(district, m2, geometry)\nggplot() +\n  geom_sf(data = sf.districts, linetype = 2) +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  ggthemes::theme_map()"},{"path":"shapefiles.html","id":"autobahnen","chapter":"2 Shapefiles","heading":"2.3 Autobahnen","text":"","code":"\nsf.highways <- \n  read_sf(here::here(\"data-raw/shapefiles/highways/autobahn.shp\")) |> \n  st_transform(\"WGS84\") |> \n  rename(\n    \"feeder\" = ZUBRINGER\n  ) |> \n  mutate(\n    feeder = case_when(\n      feeder == \"j\" ~ TRUE,\n      feeder == \"n\" ~ FALSE\n    )\n  )\nggplot() +\n  geom_sf(data = sf.districts, linetype = 2) +\n  geom_sf(data = sf.highways, alpha = 0.6) +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  ggthemes::theme_map()"},{"path":"shapefiles.html","id":"flüsse","chapter":"2 Shapefiles","heading":"2.4 Flüsse","text":"","code":"\nsf.rivers <- \n  read_sf(here::here(\"data-raw/shapefiles/rivers/gewaesser.shp\")) |> \n  st_transform(\"WGS84\") |> \n  select(geometry)\nggplot() +\n  geom_sf(data = sf.districts, linetype = 2) +\n  geom_sf(data = sf.rivers, alpha = 0.6) +\n  geom_sf(data = sf.highways, alpha = 0.6) +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  ggthemes::theme_map()"},{"path":"shapefiles.html","id":"finale-karte","chapter":"2 Shapefiles","heading":"2.5 Finale Karte","text":"","code":"\nggplot() +\n  geom_sf(data = sf.districts, aes(fill = district), alpha = 0.7) +\n  geom_sf(data = sf.rivers, alpha = 0.7, fill = \"lightblue\") +\n  geom_sf(data = sf.regensburg, lwd = 1, alpha = 0) +\n  theme_void() +\n  theme(\n    legend.position = \"right\",\n    legend.title = element_blank()\n  )"},{"path":"leaflet-map.html","id":"leaflet-map","chapter":"3 Leaflet Karte","heading":"3 Leaflet Karte","text":"","code":"\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(sf)\nload(\n  here::here(\"data/regensburg_data.rda\")\n)\n\nload(\n  here::here(\"data/shapefiles.rda\")\n)\nsf.data <-\n  data |> \n  st_as_sf(coords = c(\"lng\", \"lat\"), crs = \"WGS84\")"},{"path":"leaflet-map.html","id":"basemap","chapter":"3 Leaflet Karte","heading":"3.1 Basemap","text":"","code":"\nbounds <- sf.regensburg |> st_bbox()\n\nmap <- \n  leaflet(\n    options = leafletOptions(\n      crs = leafletCRS(code = \"WGS84\"),\n      preferCanvas = NULL\n    )\n  ) |> \n  addProviderTiles(\n    provider = providers$OpenStreetMap.DE,\n    group = \"OSM\",\n    options = providerTileOptions(minZoom = 11)\n  ) |> \n  setView(\n    lng = (as.numeric(bounds[1]) + as.numeric(bounds[3]))/2,\n    lat = (as.numeric(bounds[2]) + as.numeric(bounds[4]))/2,\n    zoom = 12\n  ) |> \n  setMaxBounds(\n    lng1 = as.numeric(bounds[1] - 0.015), \n    lat1 = as.numeric(bounds[2] - 0.015), \n    lng2 = as.numeric(bounds[3] + 0.015), \n    lat2 = as.numeric(bounds[4] + 0.015)\n  )"},{"path":"leaflet-map.html","id":"marker","chapter":"3 Leaflet Karte","heading":"3.2 Marker","text":"","code":"\ncustom_popup <- function(data, header) {\n  text <- \n    glue::glue(\n      \"<b>{header}<\/b> \",\n      \"<br>\",\n      \"{data$month}/{data$year} ({data$hour} Uhr)\"\n    )\n  return(text)\n}\nmap <- \n  map |> \n  addAwesomeMarkers(\n    data = data |> filter(severity == \"Toedlich\"),\n    group = \"Tödliche Unfälle\",\n    lng = ~lng,\n    lat = ~lat,\n    icon = awesomeIcons(\n      icon = 'ios-close',\n      iconColor = 'black',\n      library = 'ion',\n      markerColor = \"red\"\n    ),\n    clusterOptions = markerClusterOptions(),\n    popup = custom_popup(data = data, header = \"Tödlicher Unfall\")\n  ) |> \n  addAwesomeMarkers(\n    data = data |> filter(severity == \"Schwer\"),\n    group = \"Schwere Unfälle\",\n    lng = ~lng,\n    lat = ~lat,\n    icon = awesomeIcons(\n      icon = 'ios-close',\n      iconColor = 'black',\n      library = 'ion',\n      markerColor = \"orange\"\n    ),\n    clusterOptions = markerClusterOptions(),\n    popup = custom_popup(data = data, header = \"Schwerer Unfall\")\n  ) |> \n  addAwesomeMarkers(\n    data = data |> filter(severity == \"Leicht\"),\n    group = \"Leichte Unfälle\",\n    lng = ~lng,\n    lat = ~lat,\n    icon = awesomeIcons(\n      icon = 'ios-close',\n      iconColor = 'black',\n      library = 'ion',\n      markerColor = \"beige\"\n    ),\n    clusterOptions = markerClusterOptions(),\n    popup = custom_popup(data = data, header = \"Leichter Unfall\")\n  )"},{"path":"leaflet-map.html","id":"stadtteile-als-shapefile","chapter":"3 Leaflet Karte","heading":"3.3 Stadtteile als Shapefile","text":"","code":"\ncustom_label <- function(data) {\n  text <- glue::glue(\n    \"{data$district}: {data$n} Unfälle\"\n  )\n  return(text)\n}\ndistricts <-\n  data |> \n  st_as_sf(coords = c(\"lng\", \"lat\"), crs = \"WGS84\") |> \n  rename(\n    points = geometry\n  ) |> \n  st_join(\n    y = sf.districts |> rename(\"district_shape\" = geometry),\n    join = st_within,\n    left = TRUE\n  ) |> \n  select(-m2) |> \n  as_tibble() |> \n  left_join(\n    y = sf.districts |> rename(\"district_polygon\" = geometry) ,\n    by = \"district\"\n  ) |>\n  drop_na(district) |>\n  mutate(\n    district = as_factor(district) |>\n      fct_infreq() |>\n      fct_rev()\n  ) |> \n  add_count(district) |> \n  select(district, district_polygon, n) |> \n  unique() |> \n  st_as_sf()\nmap <-\n  map |> \n  addPolygons(\n    data = districts,\n    group = \"Stadtteile\",\n    opacity = 1,\n    weight = 0.5, \n    fillOpacity = 0.5,\n    color = \"black\",\n    fillColor = ~colorNumeric(\"viridis\", n)(n),\n    highlightOptions = highlightOptions(\n      color = \"white\", \n      weight = 2,\n      bringToFront = TRUE\n    ),\n    label = ~custom_label(data = districts)\n  )"},{"path":"leaflet-map.html","id":"bedienelemente","chapter":"3 Leaflet Karte","heading":"3.4 Bedienelemente","text":"","code":"\nmap <- \n  map |> \n    addProviderTiles(\n      provider = providers$Stamen.TonerBackground,\n      group = \"Stadtteile\",\n      options = providerTileOptions(minZoom = 11)\n    ) |> \n    addLayersControl(\n      baseGroups = c(\"OSM\", \"Stadtteile\"),\n      overlayGroups = c(\"Tödliche Unfälle\", \"Schwere Unfälle\", \"Leichte Unfälle\"),\n      options = layersControlOptions(collapsed = FALSE)\n    )"},{"path":"leaflet-map.html","id":"finale-karte-1","chapter":"3 Leaflet Karte","heading":"3.5 Finale Karte","text":"","code":"\nmap"},{"path":"total-crashes.html","id":"total-crashes","chapter":"4 Auswertung","heading":"4 Auswertung","text":"Zur besseren Lesbarkeit wird der R Code diesem Kapitel nicht gezeigt. Dieser besteht größtenteils aus Plots und ist bis auf wenige Ausnahmen nicht weiter relevant.Im Stadtgebiet Regensburg geschahen von den Jahren 2016 bis 2020 insgesamt 3167 Unfälle mit Personenschaden. Abbildung 4.1 zeigt die monatlichen Unfälle diesem Zeitraum.\nAbbildung 4.1: Monatliche Unfälle Regensburg.\nWährend sich kein eindeutiger Auf- oder Abwärtstrend feststellen lässt, zeigen die Daten dennoch eine Jährliche Periodizität: Im Sommer finden die meisten Unfälle mit Personenschaden statt, während die Anzahl der Unfälle von Herbst bis Frühjahr sinkt.Abbildung 4.2 zeigt die Anzahl der jährlichen Unfälle Regensburg. Im Jahr 2020 zeigt sich ein Rückgang von 25%. Dieser kann auf geringeren Verkehr aufgrund der Corona Pandemie zurückgeführt werden. Dies wird durch Abbildung 4.3 verdeutlicht: Alle dokumentierten Verkehrsmittel hatten einen Rückgang der jährlichen Unfälle von 2019 bis 2020.\nAbbildung 4.2: Jährliche Unfälle mit Personenschaden.\nAbbildung 4.3 zeigt zudem, dass sich die Anzahl der Unfälle aller Verkehrsmittel außer Fahrrad auf einem fallenden Trend befinden. Die Anzahl der Unfälle mit Fahrradbeteiligung dagegen stieg bis 2020 kontinuierlich .\nAbbildung 4.3: Jährliche Unfälle mit Personenschaden nach Verkehrsteilnehmer unterteilt.\n","code":""},{"path":"total-crashes.html","id":"unfälle-nach-monat","chapter":"4 Auswertung","heading":"4.1 Unfälle nach Monat","text":"","code":""},{"path":"total-crashes.html","id":"unfälle-nach-uhrzeit","chapter":"4 Auswertung","heading":"4.2 Unfälle nach Uhrzeit","text":"","code":""},{"path":"total-crashes.html","id":"unfälle-nach-ortsteil","chapter":"4 Auswertung","heading":"4.3 Unfälle nach Ortsteil","text":"","code":""},{"path":"total-crashes.html","id":"absolute-anzahl","chapter":"4 Auswertung","heading":"4.3.1 Absolute Anzahl","text":"","code":""},{"path":"total-crashes.html","id":"pro-quadratkilometer","chapter":"4 Auswertung","heading":"4.3.2 Pro Quadratkilometer","text":"","code":""},{"path":"unfallteilnehmer.html","id":"unfallteilnehmer","chapter":"5 Unfallteilnehmer","heading":"5 Unfallteilnehmer","text":"Fragen:Tödliche/Schwere Unfälle mit Fußgängern? Motorrad?Mehr Fußgängerunfälle der Innenstadt?","code":"\nload(\n  here::here(\"data/regensburg_data.rda\")\n)\ndata.vehicle <- \n  data |> \n  pivot_longer(\n    cols = bicycle:truck,\n    names_to = \"type_of_vehicle\",\n    values_to = \"took_part\"\n  ) |> \n  drop_na() |> \n  count(type_of_vehicle, took_part, severity)\n\ndata.vehicle |> knitr::kable()"},{"path":"pakete.html","id":"pakete","chapter":"Pakete","heading":"Pakete","text":"","code":""}]
